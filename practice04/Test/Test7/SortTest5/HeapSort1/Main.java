import static java.lang.System.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] ary = { 7, 5, 2, 1, 9, 3, 8, 6, 4 };
        out.println(Arrays.toString(heapSort(ary)));
    }

    public static int[] heapSort(int[] ary) {
        int n = ary.length;

        for (int i = n / 2 - 1; i >= 0; i--) {
            heap(ary, n, i); // ヒープ化
        }

        for (int j = n - 1; j >= 0; j--) {
            if (ary[0] > ary[j]) {
                int tmp = ary[0];
                ary[0] = ary[j];
                ary[j] = tmp;
                heap(ary, j, 0);
            }
        }

        return ary;
    }

    private static void heap(int[] ary, int n, int root) {
        int largest = root; // parent == root
        int l = 2 * root + 1;
        int r = 2 * root + 2;

        out.println(Arrays.toString(ary));

        if (l < n && ary[l] > ary[largest]) { // 親ノードよりも左子ノードの値の方が大きい
            largest = l;
        }
        if (r < n && ary[r] > ary[largest]) { // 右
            largest = r;
        }

        if (largest != root) { // 子ノードの値の方が大きい
            int swap = ary[root];
            ary[root] = ary[largest];
            ary[largest] = swap;
            out.println(Arrays.toString(ary));
            out.println("-----------------");
            heap(ary, n, largest);
        }

    }
}

// 7 | 4 2 | 8 4 | 5 9 | 1 6 | | 6 |
// 0 | 1 2 | 3i 4 | 5 6 | 7l 8rt
// n=9
// i=3
// j=8
// root=3
// l=3
// r=4
// 1.h(9, 3) {7 4 2 8 4 5 9 1 6}
// 2.h(9, 8) {}

// [7, 5, 2, 1, 9, 3, 8, 6, 4]
// [7, 5, 2, 6, 9, 3, 8, 1, 4]
// -----------------
// [7, 5, 2, 6, 9, 3, 8, 1, 4]
// [7, 5, 2, 6, 9, 3, 8, 1, 4]
// [7, 5, 8, 6, 9, 3, 2, 1, 4]
// -----------------
// [7, 5, 8, 6, 9, 3, 2, 1, 4]
// [7, 5, 8, 6, 9, 3, 2, 1, 4]
// [7, 9, 8, 6, 5, 3, 2, 1, 4]
// -----------------
// [7, 9, 8, 6, 5, 3, 2, 1, 4]
// [7, 9, 8, 6, 5, 3, 2, 1, 4]
// [9, 7, 8, 6, 5, 3, 2, 1, 4]
// -----------------
// [9, 7, 8, 6, 5, 3, 2, 1, 4]
// [4, 7, 8, 6, 5, 3, 2, 1, 9]
// [8, 7, 4, 6, 5, 3, 2, 1, 9]
// -----------------
// [8, 7, 4, 6, 5, 3, 2, 1, 9]
// [1, 7, 4, 6, 5, 3, 2, 8, 9]
// [7, 1, 4, 6, 5, 3, 2, 8, 9]
// -----------------
// [7, 1, 4, 6, 5, 3, 2, 8, 9]
// [7, 6, 4, 1, 5, 3, 2, 8, 9]
// -----------------
// [7, 6, 4, 1, 5, 3, 2, 8, 9]
// [2, 6, 4, 1, 5, 3, 7, 8, 9]
// [6, 2, 4, 1, 5, 3, 7, 8, 9]
// -----------------
// [6, 2, 4, 1, 5, 3, 7, 8, 9]
// [6, 5, 4, 1, 2, 3, 7, 8, 9]
// -----------------
// [6, 5, 4, 1, 2, 3, 7, 8, 9]
// [3, 5, 4, 1, 2, 6, 7, 8, 9]
// [5, 3, 4, 1, 2, 6, 7, 8, 9]
// -----------------
// [5, 3, 4, 1, 2, 6, 7, 8, 9]
// [2, 3, 4, 1, 5, 6, 7, 8, 9]
// [4, 3, 2, 1, 5, 6, 7, 8, 9]
// -----------------
// [4, 3, 2, 1, 5, 6, 7, 8, 9]
// [1, 3, 2, 4, 5, 6, 7, 8, 9]
// [3, 1, 2, 4, 5, 6, 7, 8, 9]
// -----------------
// [3, 1, 2, 4, 5, 6, 7, 8, 9]
// [2, 1, 3, 4, 5, 6, 7, 8, 9]
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
